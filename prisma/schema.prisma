// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  username String @unique
  email    String @unique

  displayName String
  avatarUrl   String?

  createdMaps  GameMap[]
  createdGames Game[]
  players      Player[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model GameMap {
  id        String @id @default(cuid())
  name      String
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  published Boolean @default(false)

  cellsHistory Json[]

  games Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([creatorId])
}

enum GamePhase {
  LOBBY
  PREPARATION
  PLAYING
  FINISHED
}

model Game {
  id String @id @default(cuid())

  map   GameMap @relation(fields: [mapId], references: [id])
  mapId String

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  players Player[]

  states Json[]

  phase GamePhase @default(LOBBY)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  minutesToTimeout Int             @default(10)
  timeouts         PlayerTimeout[]
}

model PlayerTimeout {
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id])
  playerId  String   @id @unique
  player    Player   @relation(fields: [playerId], references: [id])
  timeoutAt DateTime
}

model Player {
  id String @id @default(cuid())

  lastSeenActionId Int?
  preparationState Json?

  gameId String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  playerTimeout PlayerTimeout?
}
