// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TileType {
  Player
  Buff
}

enum GamePhase {
  Waiting
  Preparing
  Playing
  Finished
}

enum EliminationReason {
  Eliminated
  Surrendered
  Timeout
}

enum SupportedCellMode {
  Offensive
  Defensive
  Productive
}

enum SupportedPreparationActions {
  BuyUnit
  ChangeCellMode
}

enum SupportedPlayingActions {
  AttackCell
  BuyUnit
  ChangeCellMode
  EliminatePlayer
  EndTurn
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nickname String

  username String?   @unique
  password Password?

  discordId String? @unique

  avatarUrl String?

  createdMaps  HexMap[]
  createdGames Game[]   @relation(name: "creatorRel")

  players           Player[]
  preparationStates PreparationState[]
  preparationCells  PreparationCell[]
  playingUsers      PlayingUser[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model HexMap {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  games Game[]

  tiles HexMapTile[]

  published Boolean

  @@index([creatorId])
}

model HexMapTile {
  q Int
  r Int

  map   HexMap? @relation(fields: [mapId], references: [id])
  mapId String?

  type TileType @default(Player)

  @@id([q, r])
}

model PlayingUser {
  game   Game   @relation(fields: [gameId], references: [id])
  gameId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  currentSequenceId Int @default(0)

  eliminationReason EliminationReason?

  @@id([gameId, userId])
}

model Game {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  map   HexMap @relation(fields: [mapId], references: [id])
  mapId String

  creator   User   @relation(name: "creatorRel", fields: [creatorId], references: [id])
  creatorId String

  members PlayingUser[]

  minutesUntilTimeout Int @default(60)

  playingStates PlayingState[]

  preparationStates PreparationState[]

  phase         GamePhase       @default(Waiting)
  PlayingAction PlayingAction[]
}

model PreparationState {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  index  Int
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gameId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  diamonds Int
  cells    PreparationCell[]

  done Boolean @default(false)

  @@id([index, gameId])
}

model PreparationCell {
  q Int
  r Int

  state   PreparationState @relation(fields: [stateId, gameId], references: [index, gameId], onDelete: Cascade, onUpdate: Cascade)
  gameId  String
  stateId Int

  activeModeCode SupportedCellMode @default(Defensive)
  units          Int

  owner   User?   @relation(fields: [ownerId], references: [id])
  ownerId String?

  @@id([q, r, stateId, gameId])
}

model PlayingState {
  createdAt  DateTime @default(now())
  sequenceId Int

  game   Game   @relation(fields: [gameId], references: [id])
  gameId String

  causedByAction   PlayingAction? @relation(fields: [causedByActionId], references: [id])
  causedByActionId String?        @unique

  players Player[]
  cells   PlayingCell[]

  @@id([sequenceId, gameId])
}

model Player {
  index Int

  state           PlayingState @relation(fields: [stateSequenceId, gameId], references: [sequenceId, gameId])
  stateSequenceId Int
  gameId          String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  diamonds             Int
  availableModeChanges Int
  cells                PlayingCell[]

  @@id([index, stateSequenceId, gameId])
}

model PlayingCell {
  q               Int
  r               Int
  stateSequenceId Int
  gameId          String

  state PlayingState @relation(fields: [stateSequenceId, gameId], references: [sequenceId, gameId])

  owner      Player? @relation(fields: [ownerIndex, stateSequenceId, gameId], references: [index, stateSequenceId, gameId])
  ownerIndex Int?

  activeModeCode String
  units          Int

  @@id([q, r, stateSequenceId, gameId])
}

model PlayingAction {
  id        String                  @id @default(cuid())
  code      SupportedPlayingActions
  payload   Json
  nextState PlayingState?
  Game      Game?                   @relation(fields: [gameId], references: [id])
  gameId    String?
}
