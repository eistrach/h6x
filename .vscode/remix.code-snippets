{
	// Place your h6x workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create action and loader": {
		"prefix": "create-al",
		"body": [
			"import { redirect } from \"@remix-run/node\";",
			"import { z } from \"zod\";",
			"import { createAction, createLoader } from \"~/domain/index.server\";",
			"",
			"const Schema = z.object({$0});",
			"export const $1Action = createAction(Schema, async ({}, ctx) => {",
			"  return redirect(``);",
			"});",
			"",
			"export const $1Loader = createLoader(async (ctx) => {});",
			"",
			"export type ${1/(.*)/${1:/capitalize}/}LoaderData = Awaited<ReturnType<typeof $1Loader>>;",
			""
		],
		"description": "Create action and loader"
	},
	"Import action and loader": {
		"prefix": "import-al",
		"body": [
			"",
			"import { ${1/(.*)/${1:/capitalize}/}LoaderData as LoaderData } from \"~/api/$2\"",
			"export {",
			"  $1Action as action,",
			"  $1Loader as loader,",
			"} from \"~/api/$2\";",
			"",
			"$0"
		],
		"description": "Import action and loader"
	}
}
